<%@ val viewRegion: (String, String, String) %>
<%@ val samples: String %>
<%@ val readsExist: Boolean %>
<%@ val variantsExist: Boolean %>
<%@ val featuresExist: Boolean %>
<% attributes("page") = "reads" %>
<% attributes("home") = "on" %>

<%@ val rawSamples: Array[String] = samples.split(",").distinct %>
<%@ val filteredSamples: Map[String, String] = rawSamples.map(r =>  (r, r.replace("/",""))).toMap %>


<html xmlns="http://www.w3.org/1999/html">
<% render("templates/head.ssp") %>
<% render("navigation/navigation.ssp") %>
<% render("navigation/panAndZoom.ssp", Map("page" -> "reads")) %>

<div class="main">
    <div class="graphArea" id="refArea"></div>
    <div class="graphArea" id="featArea"></div>
    <div class="graphArea" id="varArea"></div>
    <div class="chart"></div>
</div>

<% render("templates/sidebar.ssp") %>
<script src="js/utilities.js"></script>
<script src="js/d3utilities.js"></script>
<script src="js/formSubmit.js"></script>

<script>
    $(document).ready(function() {
        $('.menu-link').bigSlide();
    });

    <!-- Define Global Variables -->
    var viewRefName = "${viewRegion._1}";
    var viewRegStart = parseInt(${viewRegion._2}, 10);
    var mapQuality = 100;
    var viewRegEnd = parseInt(${viewRegion._3}, 10);
    var readsExist = ${readsExist};
    var variantsExist = ${variantsExist};
    var featuresExist = ${featuresExist};
    var refSequence = null;

    var sampleIds = "${samples}";
    var rawSamples = sampleIds.split(",").unique();
    var samples = filterNames(rawSamples);

    // object used to track sample names and their corresponding html identifiers
    var sampleMap = {};
    for (var i = 0; i < rawSamples.length; i++){
    sampleMap[filterName(rawSamples[i])] = rawSamples[i];
    }
    var width = window.innerWidth - 18;

</script>
<script src="js/reads.js"></script>
<script src="js/freq.js"></script>
<script src="js/variants.js"></script>
<script src="js/reference.js"></script>
<script src="js/overall.js"></script>

</html>
  
<script>
function home(dictionary){
  //Render read summary visualization on the home screen at startup 
  var namelist=[];
  var lengthlist=[];
  var totalLength=0;
  var dataset = [];
  for (i = 0; i < dictionary.length; i++) { 
   var range = dictionary[i].split(":")[1].split("-");
   var length = parseInt(range[1]-range[0]);
   var name = dictionary[i].split(":")[0];
   dataset.push({name: name, length: length });
   namelist.push(name);
   lengthlist.push(length);
   totalLength+=length;
  }

  // Sorting by numerical value and not lexical order
  dataset.sort(function(a, b){return b.length-a.length}); 
  
  // Can end range with d3.max(lengthlist) = 249250621 or something smaller (fit in screen)
  var x = d3.scale.linear()
    .domain([0, 120])
    .range([0, 150000]);
  
  var chart  = d3.select(".chart")
    .selectAll("div")
    .data(dataset)
    .enter().append("div")
    .style("width", function(d) { return x(d.length)/d3.max(lengthlist) + "px"; })
    .text(function(d) { return d.name; });

  var path  = d3.select(".chart")
                .selectAll("div")
                .data(dataset);
  
  path.on('click', function(d) {
    var start = Math.round(d.length/2.);
    var end =  Math.round(d.length/2. +1000);
    document.getElementById("autocomplete").value = d.name+":"+start.toString()+"-"+end;
    render(d.name, start,end, 50); 
  });  

  path.on('mouseover', function(d,i) {                              
    path[0][i].style.backgroundColor = "red";
  });     

  path.on('mouseout', function(d,i) {                              
    path[0][i].style.backgroundColor = "steelblue";
  });     
}
</script>